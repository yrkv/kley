WHITESPACE = _{ " " | "\n" | "\t" }
COMMENT = _{ ("//" ~ !("/" | "!") ~ (!newline ~ ANY)* ~ newline) }
newline = { "\n" | "\r\n" }
program = _{ SOI ~ (stmt+) ~ EOI }

// statements
stmt = _{
    // function_def
    ifthenelse
    | (binding | assign | expression) ~ ";"
}

ifthenelse = {
    "if" ~ "(" ~ expression ~ ")" ~ block_large ~ ("else" ~ block_large)?
}

// function_def = {
    // "fn" ~ ident ~ 
// }

binding = { "let" ~ ident ~ ":" ~ type ~ "=" ~ expression }
assign = { ident ~ "=" ~ expression }

// type = @{ ident ~ ("<" ~ ident ~ ">")? }
type = _{
    t_str | t_int | t_bool | t_unit | t_float
    | t_list | t_map | t_tuple | t_variant | t_record
    | t_ident // t_ident has to be least due to PEG rules
}
t_str = @{ "str" }
t_int = @{ "int" }
t_bool = @{ "bool" }
t_unit = @{ "unit" }
t_float = @{ "float" }
t_list = { "list" ~ "<" ~ type ~ ">" }
t_map = { "map" ~ "<" ~ type ~ "," ~ type ~ ">" }
t_tuple = { "(" ~ type ~ ("," ~ type)* ~ ","? ~ ")" }
t_variant = { "[" ~ ident ~ ":" ~ type ~ ("," ~ ident ~ ":" ~ type)* ~ ","? ~ "]" }
t_record = { "{" ~ ident ~ ":" ~ type ~ ("," ~ ident ~ ":" ~ type)* ~ ","? ~ "}" }
t_ident = @{ ident }

expression = _{
    infix_expr
    | expr
}

expr = _{
    ("(" ~ expression ~ ")")
    | ifthenelse
    | command
    | block_small
    | record_value
    | call
    | atom
}
atom = _{ number | quote_string | boolean | ident }

call = { ident ~ "(" ~ call_args ~ ")" }
call_args = _{ expression? ~ ("," ~ expression)* }

// non-atomic because it's used for interpolation,
// see https://pest.rs/book/grammars/syntax.html#non-atomic
block_small = !{ "{" ~ expression ~ "}" }
block_large = { "{" ~ stmt+ ~ expression? ~ "}" }

record_value = {
    "{" ~
        ident ~ ":" ~ expression ~
        ("," ~ ident ~ ":" ~ expression)* ~ ","?
    ~ "}"
}

// command = { "[" ~ (command_text | block)+ ~ "]" }
command = { "[" ~ command_token+ ~ "]" }
command_token = ${
    ( block_small
    | command_text
    | quote_string
    | raw_string )+
}
command_text = ${ (!(WHITESPACE | "\"" | "'" | "[" | "]" | "{" | "}") ~ ANY)+ }
// command_text_2quote = ${ (!("\"" | "{") ~ ANY)+ }
// command_text = @{ (!("[" | "]" | "{" | "}") ~ ANY)+ }

quote_string = ${ "\"" ~ (block_small | quote_string_text)* ~ "\"" }
quote_string_text = ${ (!("\"" | "{") ~ ANY)+ }

raw_string = ${ "'" ~ raw_string_text ~ "'" }
raw_string_text = @{ (!"'" ~ ANY)* }

number = @{ ASCII_DIGIT+ }
boolean = @{ "true" | "false" }
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* } 

infix = @{
    "+" | "-" | "*" | "/"
    | ">" | "<" | "==" | "!="
}
infix_expr = { expr ~ infix ~ expression }




